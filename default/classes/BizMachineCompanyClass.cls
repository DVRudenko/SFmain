//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class BizMachineCompanyClass {

    public class Meta {
        public String DataType {get;set;}
        public String Dataset {get;set;}
        public Integer CurrentNumberOfAPICallsPerMinute {get;set;}
        public Integer RemainingNumberOfAPICallsPerMinute {get;set;}
        public Integer CurrentNumberOfAPICallsPerDay {get;set;}
        public Integer RemainingNumberOfAPICallsPerDay {get;set;}
        public String APIKeyExpiresAt {get;set;}

        public Meta(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'DataType') {
                            DataType = parser.getText();
                        } else if (text == 'Dataset') {
                            Dataset = parser.getText();
                        } else if (text == 'CurrentNumberOfAPICallsPerMinute') {
                            CurrentNumberOfAPICallsPerMinute = parser.getIntegerValue();
                        } else if (text == 'RemainingNumberOfAPICallsPerMinute') {
                            RemainingNumberOfAPICallsPerMinute = parser.getIntegerValue();
                        } else if (text == 'CurrentNumberOfAPICallsPerDay') {
                            CurrentNumberOfAPICallsPerDay = parser.getIntegerValue();
                        } else if (text == 'RemainingNumberOfAPICallsPerDay') {
                            RemainingNumberOfAPICallsPerDay = parser.getIntegerValue();
                        } else if (text == 'APIKeyExpiresAt') {
                            APIKeyExpiresAt = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Employees {
        public String Code {get;set;}
        public Double ValueUpperBound {get;set;}
        public Double ValueLowerBound {get;set;}

        public Employees(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'Code') {
                            Code = parser.getText();
                        } else if (text == 'ValueUpperBound') {
                            ValueUpperBound = parser.getDoubleValue();
                        } else if (text == 'ValueLowerBound') {
                            ValueLowerBound = parser.getDoubleValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Employees consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public Integer Status {get;set;}
    public Data Data {get;set;}
    public Meta Meta {get;set;}

    public BizMachineCompanyClass(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'Status') {
                        Status = parser.getIntegerValue();
                    } else if (text == 'Data') {
                        Data = new Data(parser);
                    } else if (text == 'Meta') {
                        Meta = new Meta(parser);
                    } else {
                        System.debug(LoggingLevel.WARN, 'BizMachineCompanyClass consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }

    public class Data {
        public Integer VehiclesOperatedCount {get;set;}
        public Integer VehiclesOwnedCount {get;set;}
        public Integer ElectricVehiclesCount {get;set;}
        public Integer PremiumVehiclesCount {get;set;}
        public Integer ElectrobusCount {get;set;}
        public List<MostCommonVehicleBrand> MostCommonVehicleBrand {get;set;}
        public List<MostCommonVehicleModel> MostCommonVehicleModel {get;set;}
        public Boolean IsImporterOrExporter {get;set;}
        public Boolean ImportantChange {get;set;}
        public Integer PersonalVehicles {get;set;}
        public Integer Trucks {get;set;}
        public Integer OtherVehicles {get;set;}
        public String ConnectedCompaniesCount {get;set;}
        public String Website {get;set;}
        public String Email {get;set;}
        public String Phone {get;set;}
        public String SelfDeclaredDescription {get;set;}
        public NetProfitMargin NetProfitMargin {get;set;}
        public Employees Employees {get;set;}
        public NACE NACE {get;set;}
        public MetaIndicators MetaIndicators {get;set;}
        public PublicMoney PublicMoney {get;set;}
        public SocialNetworks SocialNetworks {get;set;}
        //public String Risks {get;set;}
        public RegisteredAddress RegisteredAddress {get;set;}
        public String FileNumber {get;set;}
        public String Court {get;set;}
        public String RegistrationNumber {get;set;}
        public String Name {get;set;}
        public String DateEstablished {get;set;}
        public String JusticeCzLink {get;set;}
        public String TaxRegistrationNumber {get;set;}
        public String ProspectorLink {get;set;}
        public Integer RiskIndicator {get;set;}
        public Double RevenueGrowth {get;set;}
        public PublicMoney RegisteredCapital {get;set;}
        public LegalForm LegalForm {get;set;}
        public Revenue Revenue {get;set;}
        public List<Owners> Owners {get;set;}
        public List<StatutoryReps> StatutoryReps {get;set;}

        public Data(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'VehiclesOperatedCount') {
                            VehiclesOperatedCount = parser.getIntegerValue();
                        } else if (text == 'VehiclesOwnedCount') {
                            VehiclesOwnedCount = parser.getIntegerValue();
                        } else if (text == 'ElectricVehiclesCount') {
                            ElectricVehiclesCount = parser.getIntegerValue();
                        } else if (text == 'PremiumVehiclesCount') {
                            PremiumVehiclesCount = parser.getIntegerValue();
                        } else if (text == 'ElectrobusCount') {
                            ElectrobusCount = parser.getIntegerValue();
                        } else if (text == 'MostCommonVehicleBrand') {
                            MostCommonVehicleBrand = arrayOfMostCommonVehicleBrand(parser);
                        } else if (text == 'MostCommonVehicleModel') {
                            MostCommonVehicleModel = arrayOfMostCommonVehicleModel(parser);
                        } else if (text == 'IsImporterOrExporter') {
                            IsImporterOrExporter = parser.getBooleanValue();
                        } else if (text == 'ImportantChange') {
                            ImportantChange = parser.getBooleanValue();
                        } else if (text == 'PersonalVehicles') {
                            PersonalVehicles = parser.getIntegerValue();
                        } else if (text == 'Trucks') {
                            Trucks = parser.getIntegerValue();
                        } else if (text == 'OtherVehicles') {
                            OtherVehicles = parser.getIntegerValue();
                        } else if (text == 'ConnectedCompaniesCount') {
                            ConnectedCompaniesCount = parser.getText();
                        } else if (text == 'Website') {
                            Website = parser.getText();
                        } else if (text == 'Email') {
                            Email = parser.getText();
                        } else if (text == 'Phone') {
                            Phone = parser.getText();
                        } else if (text == 'SelfDeclaredDescription') {
                            SelfDeclaredDescription = parser.getText();
                        } else if (text == 'NetProfitMargin') {
                            NetProfitMargin = new NetProfitMargin(parser);
                        } else if (text == 'Employees') {
                            Employees = new Employees(parser);
                        } else if (text == 'NACE') {
                            NACE = new NACE(parser);
                        } else if (text == 'MetaIndicators') {
                            MetaIndicators = new MetaIndicators(parser);
                        } else if (text == 'PublicMoney') {
                            PublicMoney = new PublicMoney(parser);
                        } else if (text == 'SocialNetworks') {
                            SocialNetworks = new SocialNetworks(parser);
                        /*} else if (text == 'Risks') {
                            Risks = parser.getText();*/
                        } else if (text == 'RegisteredAddress') {
                            RegisteredAddress = new RegisteredAddress(parser);
                        } else if (text == 'FileNumber') {
                            FileNumber = parser.getText();
                        } else if (text == 'Court') {
                            Court = parser.getText();
                        } else if (text == 'RegistrationNumber') {
                            RegistrationNumber = parser.getText();
                        } else if (text == 'Name') {
                            Name = parser.getText();
                        } else if (text == 'DateEstablished') {
                            DateEstablished = parser.getText();
                        } else if (text == 'JusticeCzLink') {
                            JusticeCzLink = parser.getText();
                        } else if (text == 'TaxRegistrationNumber') {
                            TaxRegistrationNumber = parser.getText();
                        } else if (text == 'ProspectorLink') {
                            ProspectorLink = parser.getText();
                        } else if (text == 'RiskIndicator') {
                            RiskIndicator = parser.getIntegerValue();
                        } else if (text == 'RevenueGrowth') {
                            RevenueGrowth = parser.getDoubleValue();
                        } else if (text == 'RegisteredCapital') {
                            RegisteredCapital = new PublicMoney(parser);
                        } else if (text == 'LegalForm') {
                            LegalForm = new LegalForm(parser);
                        } else if (text == 'Revenue') {
                            Revenue = new Revenue(parser);
                        } else if (text == 'Owners') {
                            Owners = arrayOfOwners(parser);
                        } else if (text == 'StatutoryReps') {
                            StatutoryReps = arrayOfStatutoryReps(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class MetaIndicators {
        public Integer Activity {get;set;}
        public Integer Reachability {get;set;}
        public Integer Growth {get;set;}

        public MetaIndicators(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'Activity') {
                            Activity = parser.getIntegerValue();
                        } else if (text == 'Reachability') {
                            Reachability = parser.getIntegerValue();
                        } else if (text == 'Growth') {
                            Growth = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'MetaIndicators consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Owners {
        public String Name {get;set;}
        public String DateOfBirth {get;set;}
        public String RegistrationNumber {get;set;}
        public RegisteredAddress Address {get;set;}
        public Double Share {get;set;}

        public Owners(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'Name') {
                            Name = parser.getText();
                        } else if (text == 'DateOfBirth') {
                            DateOfBirth = parser.getText();
                        } else if (text == 'RegistrationNumber') {
                            RegistrationNumber = parser.getText();
                        } else if (text == 'Address') {
                            Address = new RegisteredAddress(parser);
                        } else if (text == 'Share') {
                            Share = parser.getDoubleValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Owners consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class NACE {
        public Primary Primary {get;set;}
        public List<Primary> Other {get;set;}

        public NACE(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'Primary') {
                            Primary = new Primary(parser);
                        } else if (text == 'Other') {
                            Other = arrayOfPrimary(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'NACE consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class MostCommonVehicleBrand {
        public Object Logo {get;set;}
        public String Code {get;set;}

        public MostCommonVehicleBrand(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'Logo') {
                            Logo = parser.readValueAs(Object.class);
                        } else if (text == 'Code') {
                            Code = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'MostCommonVehicleBrand consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class RegisteredAddress {
        public String Text {get;set;}
        public Double Latitude {get;set;}
        public Double Longitude {get;set;}
        public String NUTSCode {get;set;}
        public String StreetName {get;set;}
        public String StreetNumber {get;set;}
        public String City {get;set;}
        public String PostalCode {get;set;}
        public String AdmCode {get;set;}
        public Boolean IsEvidenceNumber {get;set;}
        public String HouseNumber {get;set;}
        public String OrientationNumber {get;set;}
        public String CountryCode {get;set;}
        public String CityPart {get;set;}
        public String CityDistrict {get;set;}
        public String Region {get;set;}
        public String District {get;set;}
        public String Lau1Code {get;set;}

        public RegisteredAddress(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'Text') {
                            Text = parser.getText();
                        } else if (text == 'Latitude') {
                            Latitude = parser.getDoubleValue();
                        } else if (text == 'Longitude') {
                            Longitude = parser.getDoubleValue();
                        } else if (text == 'NUTSCode') {
                            NUTSCode = parser.getText();
                        } else if (text == 'StreetName') {
                            StreetName = parser.getText();
                        } else if (text == 'StreetNumber') {
                            StreetNumber = parser.getText();
                        } else if (text == 'City') {
                            City = parser.getText();
                        } else if (text == 'PostalCode') {
                            PostalCode = parser.getText();
                        } else if (text == 'AdmCode') {
                            AdmCode = parser.getText();
                        } else if (text == 'IsEvidenceNumber') {
                            IsEvidenceNumber = parser.getBooleanValue();
                        } else if (text == 'HouseNumber') {
                            HouseNumber = parser.getText();
                        } else if (text == 'OrientationNumber') {
                            OrientationNumber = parser.getText();
                        } else if (text == 'CountryCode') {
                            CountryCode = parser.getText();
                        } else if (text == 'CityPart') {
                            CityPart = parser.getText();
                        } else if (text == 'CityDistrict') {
                            CityDistrict = parser.getText();
                        } else if (text == 'Region') {
                            Region = parser.getText();
                        } else if (text == 'District') {
                            District = parser.getText();
                        } else if (text == 'Lau1Code') {
                            Lau1Code = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'RegisteredAddress consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Primary {
        public String Code {get;set;}
        public String Text {get;set;}

        public Primary(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'Code') {
                            Code = parser.getText();
                        } else if (text == 'Text') {
                            Text = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Primary consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Revenue {
        public String Currency_x {get;set;}
        public Integer Scale {get;set;}
        public String LastReportedYear {get;set;}
        public Double ValueUpperBound {get;set;}
        public Double ValueLowerBound {get;set;}

        public Revenue(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'Currency_x') {
                            Currency_x = parser.getText();
                        } else if (text == 'Scale') {
                            Scale = parser.getIntegerValue();
                        } else if (text == 'LastReportedYear') {
                            LastReportedYear = parser.getText();
                        } else if (text == 'ValueUpperBound') {
                            ValueUpperBound = parser.getDoubleValue();
                        } else if (text == 'ValueLowerBound') {
                            ValueLowerBound = parser.getDoubleValue();
                        }else if (text == 'Currency') {
                            Currency_x = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Revenue consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class MostCommonVehicleModel {
        public String Code {get;set;}

        public MostCommonVehicleModel(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'Code') {
                            Code = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'MostCommonVehicleModel consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class SocialNetworks {
        public String LinkedIn {get;set;}
        public String Facebook {get;set;}
        public String Twitter {get;set;}

        public SocialNetworks(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'LinkedIn') {
                            LinkedIn = parser.getText();
                        } else if (text == 'Facebook') {
                            Facebook = parser.getText();
                        } else if (text == 'Twitter') {
                            Twitter = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'SocialNetworks consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class StatutoryReps {
        public String Name {get;set;}
        public String DateOfBirth {get;set;}
        public RegisteredAddress Address {get;set;}
        public String Role {get;set;}

        public StatutoryReps(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'Name') {
                            Name = parser.getText();
                        } else if (text == 'DateOfBirth') {
                            DateOfBirth = parser.getText();
                        } else if (text == 'Address') {
                            Address = new RegisteredAddress(parser);
                        } else if (text == 'Role') {
                            Role = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'StatutoryReps consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class NetProfitMargin {
        public Double Value {get;set;}
        public String LastReportedYear {get;set;}

        public NetProfitMargin(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'Value') {
                            Value = parser.getDoubleValue();
                        } else if (text == 'LastReportedYear') {
                            LastReportedYear = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'NetProfitMargin consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class PublicMoney {
        public String Currency_x {get;set;}
        public Integer Scale {get;set;}
        public Double Value {get;set;}

        public PublicMoney(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'Currency_x') {
                            Currency_x = parser.getText();
                        } else if (text == 'Currency') {
                            Currency_x = parser.getText();
                        } else if (text == 'Scale') {
                            Scale = parser.getIntegerValue();
                        } else if (text == 'Value') {
                            Value = parser.getDoubleValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'PublicMoney consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class LegalForm {
        public Integer ID {get;set;}
        public String Text {get;set;}

        public LegalForm(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'ID') {
                            ID = parser.getIntegerValue();
                        } else if (text == 'Text') {
                            Text = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'LegalForm consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }


    public static BizMachineCompanyClass parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new BizMachineCompanyClass(parser);
    }

    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT ||
                    curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                    curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }

    private static List<Owners> arrayOfOwners(System.JSONParser p) {
        List<Owners> res = new List<Owners>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Owners(p));
        }
        return res;
    }


    private static List<Primary> arrayOfPrimary(System.JSONParser p) {
        List<Primary> res = new List<Primary>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Primary(p));
        }
        return res;
    }


    private static List<StatutoryReps> arrayOfStatutoryReps(System.JSONParser p) {
        List<StatutoryReps> res = new List<StatutoryReps>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new StatutoryReps(p));
        }
        return res;
    }

    private static List<MostCommonVehicleBrand> arrayOfMostCommonVehicleBrand(System.JSONParser p) {
        List<MostCommonVehicleBrand> res = new List<MostCommonVehicleBrand>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new MostCommonVehicleBrand(p));
        }
        return res;
    }


    private static List<MostCommonVehicleModel> arrayOfMostCommonVehicleModel(System.JSONParser p) {
        List<MostCommonVehicleModel> res = new List<MostCommonVehicleModel>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new MostCommonVehicleModel(p));
        }
        return res;
    }



    public static Map<String, Object> getBMCompanyMap(BizMachineCompanyClass bm){
        Map<String, Object> bMap = new Map<String, Object>();
        if(bm.Status != null)bMap.put('Status', bm.Status);
        if(bm.Data.VehiclesOperatedCount != null)bMap.put('Data.VehiclesOperatedCount', bm.Data.VehiclesOperatedCount);
        if(bm.Data.VehiclesOwnedCount != null)bMap.put('Data.VehiclesOwnedCount', bm.Data.VehiclesOwnedCount);
        if(bm.Data.ElectricVehiclesCount != null)bMap.put('Data.ElectricVehiclesCount', bm.Data.ElectricVehiclesCount);
        if(bm.Data.PremiumVehiclesCount != null)bMap.put('Data.PremiumVehiclesCount', bm.Data.PremiumVehiclesCount);
        if(bm.Data.ElectrobusCount != null)bMap.put('Data.ElectrobusCount', bm.Data.ElectrobusCount);
        //if(bm.Data.MostCommonVehicleBrand != null)bMap.put('Data.MostCommonVehicleBrand', bm.Data.MostCommonVehicleBrand);
        //if(bm.Data.MostCommonVehicleModel != null)bMap.put('Data.MostCommonVehicleModel', bm.Data.MostCommonVehicleModel);
        if(bm.Data.IsImporterOrExporter != null)bMap.put('Data.IsImporterOrExporter', bm.Data.IsImporterOrExporter);
        if(bm.Data.ImportantChange != null)bMap.put('Data.ImportantChange', bm.Data.ImportantChange);
        if(bm.Data.PersonalVehicles != null)bMap.put('Data.PersonalVehicles', bm.Data.PersonalVehicles);
        if(bm.Data.Trucks != null)bMap.put('Data.Trucks', bm.Data.Trucks);
        if(bm.Data.OtherVehicles != null)bMap.put('Data.OtherVehicles', bm.Data.OtherVehicles);
        if(bm.Data.ConnectedCompaniesCount != null)bMap.put('Data.ConnectedCompaniesCount', bm.Data.ConnectedCompaniesCount);
        if(bm.Data.Website != null)bMap.put('Data.Website', bm.Data.Website);
        if(bm.Data.Email != null)bMap.put('Data.Email', bm.Data.Email);
        if(bm.Data.Phone != null)bMap.put('Data.Phone', bm.Data.Phone);
        if(bm.Data.SelfDeclaredDescription != null)bMap.put('Data.SelfDeclaredDescription', bm.Data.SelfDeclaredDescription);
        if(bm.Data.NetProfitMargin != null){
            if(bm.Data.NetProfitMargin.Value != null)bMap.put('Data.NetProfitMargin.Value', bm.Data.NetProfitMargin.Value);
            if(bm.Data.NetProfitMargin.LastReportedYear != null)bMap.put('Data.NetProfitMargin.LastReportedYear', bm.Data.NetProfitMargin.LastReportedYear);
        }

        if(bm.Data.Employees != null){
            if(bm.Data.Employees.Code != null)bMap.put('Data.Employees.Code', bm.Data.Employees.Code);
            if(bm.Data.Employees.ValueUpperBound != null)bMap.put('Data.Employees.ValueUpperBound', bm.Data.Employees.ValueUpperBound);
            if(bm.Data.Employees.ValueLowerBound != null)bMap.put('Data.Employees.ValueLowerBound', bm.Data.Employees.ValueLowerBound);
        }
        if(bm.Data.NACE != null){
            if(bm.Data.NACE != null)bMap.put('Data.NACE', bm.Data.NACE);
            if(bm.Data.NACE.Primary != null){
                if(bm.Data.NACE.Primary.Code != null)bMap.put('Data.NACE.Primary.Code', bm.Data.NACE.Primary.Code);
                if(bm.Data.NACE.Primary.Text != null)bMap.put('Data.NACE.Primary.Text', bm.Data.NACE.Primary.Text);
            }
        }

        //bMap.put('Data.NACE.Other', bm.Data.NACE.Other);
        //Toto je list, řešit někdy v budoucnu
        if(bm.Data.MetaIndicators != null){
            if(bm.Data.MetaIndicators.Activity != null)bMap.put('Data.MetaIndicators.Activity', bm.Data.MetaIndicators.Activity);
            if(bm.Data.MetaIndicators.Reachability != null)bMap.put('Data.MetaIndicators.Reachability', bm.Data.MetaIndicators.Reachability);
            if(bm.Data.MetaIndicators.Growth != null)bMap.put('Data.MetaIndicators.Growth', bm.Data.MetaIndicators.Growth);
        }
        if(bm.Data.PublicMoney != null){
            if(bm.Data.PublicMoney.Currency_x != null)bMap.put('Data.PublicMoney.Currency', bm.Data.PublicMoney.Currency_x);
            if(bm.Data.PublicMoney.Scale != null)bMap.put('Data.PublicMoney.Scale', bm.Data.PublicMoney.Scale);
            if(bm.Data.PublicMoney.Value != null)bMap.put('Data.PublicMoney.Value', bm.Data.PublicMoney.Value);
        }
        if(bm.Data.SocialNetworks != null){
            if(bm.Data.SocialNetworks.LinkedIn != null)bMap.put('Data.SocialNetworks.LinkedIn', bm.Data.SocialNetworks.LinkedIn);
            if(bm.Data.SocialNetworks.Facebook != null)bMap.put('Data.SocialNetworks.Facebook', bm.Data.SocialNetworks.Facebook);
            if(bm.Data.SocialNetworks.Twitter != null)bMap.put('Data.SocialNetworks.Twitter', bm.Data.SocialNetworks.Twitter);
        }

        //if(bm.Data.Risks != null)bMap.put('Data.Risks', bm.Data.Risks);
        if(bm.Data.RegisteredAddress != null){
            if(bm.Data.RegisteredAddress.Text != null)bMap.put('Data.RegisteredAddress.Text', bm.Data.RegisteredAddress.Text);
            if(bm.Data.RegisteredAddress.Latitude != null)bMap.put('Data.RegisteredAddress.Latitude', bm.Data.RegisteredAddress.Latitude);
            if(bm.Data.RegisteredAddress.Longitude != null)bMap.put('Data.RegisteredAddress.Longitude', bm.Data.RegisteredAddress.Longitude);
            if(bm.Data.RegisteredAddress.NUTSCode != null)bMap.put('Data.RegisteredAddress.NUTSCode', bm.Data.RegisteredAddress.NUTSCode);
            if(bm.Data.RegisteredAddress.StreetName != null)bMap.put('Data.RegisteredAddress.StreetName', bm.Data.RegisteredAddress.StreetName);
            if(bm.Data.RegisteredAddress.StreetNumber != null)bMap.put('Data.RegisteredAddress.StreetNumber', bm.Data.RegisteredAddress.StreetNumber);

            String customCity;
            if(bm.Data.RegisteredAddress.CityDistrict != null && bm.Data.RegisteredAddress.CityPart != null){
                customCity = bm.Data.RegisteredAddress.CityDistrict + ' - ' + bm.Data.RegisteredAddress.CityPart;
            }else if(bm.Data.RegisteredAddress.City == bm.Data.RegisteredAddress.CityPart){
                customCity = bm.Data.RegisteredAddress.City;
            }else if(bm.Data.RegisteredAddress.CityPart != null && bm.Data.RegisteredAddress.City != null){
                customCity = bm.Data.RegisteredAddress.City + ' - '+ bm.Data.RegisteredAddress.CityPart;
            }else{
                customCity = bm.Data.RegisteredAddress.City;
            }
            bMap.put('Data.RegisteredAddress.CustomCity', customCity);

            if(bm.Data.RegisteredAddress.StreetName == null){
                bm.Data.RegisteredAddress.StreetName = bm.Data.RegisteredAddress.City;
            }

            if(bm.Data.RegisteredAddress.OrientationNumber != null){
                if(bm.Data.RegisteredAddress.StreetName != null && bm.Data.RegisteredAddress.OrientationNumber != null && bm.Data.RegisteredAddress.StreetNumber != null)bMap.put('Data.RegisteredAddress.StreetWithNumber', bm.Data.RegisteredAddress.StreetName+' '+bm.Data.RegisteredAddress.StreetNumber+'/'+bm.Data.RegisteredAddress.OrientationNumber);
            }else{
                if(bm.Data.RegisteredAddress.StreetNumber != null && bm.Data.RegisteredAddress.StreetName != null)bMap.put('Data.RegisteredAddress.StreetWithNumber', bm.Data.RegisteredAddress.StreetName+' '+bm.Data.RegisteredAddress.StreetNumber);
            }

            if(bm.Data.RegisteredAddress.OrientationNumber == null && bm.Data.RegisteredAddress.StreetNumber == null){
                bMap.put('Data.RegisteredAddress.StreetWithNumber', bm.Data.RegisteredAddress.StreetName);
            }

            if(bm.Data.RegisteredAddress.City != null)bMap.put('Data.RegisteredAddress.City', bm.Data.RegisteredAddress.City);

            if(bm.Data.RegisteredAddress.PostalCode != null)bMap.put('Data.RegisteredAddress.PostalCode', bm.Data.RegisteredAddress.PostalCode);
            if(bm.Data.RegisteredAddress.AdmCode != null)bMap.put('Data.RegisteredAddress.AdmCode', bm.Data.RegisteredAddress.AdmCode);
            if(bm.Data.RegisteredAddress.IsEvidenceNumber != null)bMap.put('Data.RegisteredAddress.IsEvidenceNumber', bm.Data.RegisteredAddress.IsEvidenceNumber);
            if(bm.Data.RegisteredAddress.HouseNumber != null)bMap.put('Data.RegisteredAddress.HouseNumber', bm.Data.RegisteredAddress.HouseNumber);
            if(bm.Data.RegisteredAddress.OrientationNumber != null)bMap.put('Data.RegisteredAddress.OrientationNumber', bm.Data.RegisteredAddress.OrientationNumber);
            if(bm.Data.RegisteredAddress.CountryCode != null)bMap.put('Data.RegisteredAddress.CountryCode', bm.Data.RegisteredAddress.CountryCode);
            if(bm.Data.RegisteredAddress.CityPart != null)bMap.put('Data.RegisteredAddress.CityPart', bm.Data.RegisteredAddress.CityPart);
            if(bm.Data.RegisteredAddress.CityDistrict != null)bMap.put('Data.RegisteredAddress.CityDistrict', bm.Data.RegisteredAddress.CityDistrict);
            if(bm.Data.RegisteredAddress.Region != null)bMap.put('Data.RegisteredAddress.Region', bm.Data.RegisteredAddress.Region);
            if(bm.Data.RegisteredAddress.District != null)bMap.put('Data.RegisteredAddress.District', bm.Data.RegisteredAddress.District);
            if(bm.Data.RegisteredAddress.Lau1Code != null)bMap.put('Data.RegisteredAddress.Lau1Code', bm.Data.RegisteredAddress.Lau1Code);
        }

        if(bm.Data.FileNumber != null)bMap.put('Data.FileNumber', bm.Data.FileNumber);
        if(bm.Data.Court != null)bMap.put('Data.Court', bm.Data.Court);
        if(bm.Data.RegistrationNumber != null)bMap.put('Data.RegistrationNumber', bm.Data.RegistrationNumber);
        if(bm.Data.Name != null)bMap.put('Data.Name', bm.Data.Name);
        if(bm.Data.DateEstablished != null)bMap.put('Data.DateEstablished', bm.Data.DateEstablished);
        if(bm.Data.JusticeCzLink != null)bMap.put('Data.JusticeCzLink', bm.Data.JusticeCzLink);
        if(bm.Data.TaxRegistrationNumber != null)bMap.put('Data.TaxRegistrationNumber', bm.Data.TaxRegistrationNumber);
        if(bm.Data.ProspectorLink != null)bMap.put('Data.ProspectorLink', bm.Data.ProspectorLink);
        if(bm.Data.RiskIndicator != null)bMap.put('Data.RiskIndicator', bm.Data.RiskIndicator);
        if(bm.Data.RevenueGrowth != null)bMap.put('Data.RevenueGrowth', bm.Data.RevenueGrowth);
        if(bm.Data.RegisteredCapital != null){
            if(bm.Data.RegisteredCapital.Value != null)bMap.put('Data.RegisteredCapital.Value', bm.Data.RegisteredCapital.Value);
            if(bm.Data.RegisteredCapital.Currency_x != null)bMap.put('Data.RegisteredCapital.Currency', bm.Data.RegisteredCapital.Currency_x);
            if(bm.Data.RegisteredCapital.Scale != null)bMap.put('Data.RegisteredCapital.Scale', bm.Data.RegisteredCapital.Scale);
        }
        if(bm.Data.LegalForm != null){
            if(bm.Data.LegalForm.ID != null)bMap.put('Data.LegalForm.ID', bm.Data.LegalForm.ID);
            if(bm.Data.LegalForm.Text != null)bMap.put('Data.LegalForm.Text', bm.Data.LegalForm.Text);
        }
        if(bm.Data.Revenue != null){
            if(bm.Data.Revenue.Currency_x != null)bMap.put('Data.Revenue.Currency', bm.Data.Revenue.Currency_x);
            if(bm.Data.Revenue.Scale != null)bMap.put('Data.Revenue.Scale', bm.Data.Revenue.Scale);
            if(bm.Data.Revenue.LastReportedYear != null)bMap.put('Data.Revenue.LastReportedYear', bm.Data.Revenue.LastReportedYear);
            if(bm.Data.Revenue.ValueUpperBound != null)bMap.put('Data.Revenue.ValueUpperBound', bm.Data.Revenue.ValueUpperBound);
        }


        return bMap;
    }

}